/*
    Insert Node in a doubly sorted linked list 
    After each insertion, the list should be sorted
   Node is defined as
   struct Node
   {
     int data;
     Node *next;
     Node *prev;
   }
   
   link to problem : https://www.hackerrank.com/challenges/insert-a-node-into-a-sorted-doubly-linked-list/submissions/code/28519817
*/
Node* SortedInsert(Node *head,int data)
{
    
    Node *nodeP = head;
    Node *nodePP = NULL;
    Node* inserted = (struct Node*) malloc(sizeof(struct Node));
    (*inserted).data = data;
    
    
    if (nodeP == NULL) {
        //Empty list case
        (*inserted).prev = NULL;
        (*inserted).next = NULL;
        
        return inserted;
    } 
    else {
        while ((*nodeP).data <= data)
        {
           
            nodePP = nodeP;
            nodeP = (*nodeP).next;
            
            if (nodeP == NULL){break;}
        }
        //should stop when nodeP.data > data or end of list
        if (nodeP == NULL){
            
            //Insert at end of list
            (*inserted).next = NULL;
            (*inserted).prev = nodePP;
            (*nodePP).next = inserted;
            return head;
        }
        else if (nodePP == NULL) {
            
            //Insert at beginning of list
            (*inserted).next = nodeP;
            (*inserted).prev = NULL;
            (*nodeP).prev = inserted;
            return inserted;
        }
        else{
          
            //Insert in middle of list
            (*inserted).next = nodeP;
            (*inserted).prev = nodePP;
            (*nodePP).next = inserted;
            (*nodeP).prev = inserted;
            return head;
        }
       
    }
    
}
